Hallo Raphael,

Heiko und ich haben uns mit Paolo Pastorelli getroffen, um sein Kompatibilitätsproblem zu besprechen, das sich als relativ einfach herausstellte.
	•	Der VBA-Code war so geschrieben, dass ein Oracle ODAC-Treiber verwendet wurde, der mehrere Einschränkungen aufweist:
	•	Es kann nur entweder ein 32-Bit- oder ein 64-Bit-ODAC-Treiber installiert sein, aber nicht beides. Es gibt also keinen „nahtlosen“ Übergang zwischen 32-Bit und 64-Bit.
	•	Der ODAC-Treiber muss genau mit der Version des Oracle-Clients übereinstimmen (z. B. funktioniert ODAC V12 nur mit Oracle Client V12).
	•	Im Company Portal gibt es nur Oracle-Treiber, aber keine ODAC-Treiber.
	•	Die aktuarialen Datenbanken, mit denen verbunden wird, verwenden Oracle Version 19. Einen alten V12-Treiber zu verwenden, nur um den VBA-Code nicht umschreiben zu müssen, stellt ein potenzielles Sicherheitsrisiko dar. Dasselbe könnte auch für andere Fälle gelten, in denen veraltete Treiber ein Sicherheitsrisiko darstellen.

Eine Lösung war, den Code so umzuschreiben, dass der ODAC-Treiber nicht mehr benötigt wird, sondern nur noch der Treiber, der im Unternehmensportal (in 32-Bit- und 64-Bit-Versionen für Oracle V19) verfügbar ist. Ich habe dies schnell umgesetzt, und der VBA-Code läuft jetzt auf 64-Bit ohne den ODAC-Treiber.

Heiko hatte dann die brillante Idee, die Plandaten direkt aus der aktuarialen Datenbank in SAP zu laden. Das löst nicht nur das Oracle-Treiberproblem, sondern bietet auch erheblichen Mehrwert, da der Prozess für Paolo viel einfacher wird. Jetzt kann er sowohl Ist- als auch Plandaten in einer Abfrage abrufen, ohne diese manuell kombinieren zu müssen.

Es könnte auch andere ältere 32-Bit COM-Add-ins geben, bei denen die beste Lösung ebenfalls SAP wäre. Heiko erwähnte zudem, dass häufig die 64-Bit-Deklarationen für Windows-API-Variablen in COM-Add-ins einfach fehlen, was leicht zu beheben ist (z. B. Declare PtrSafe Function MessageBox Lib "user32" Alias "MessageBoxA" (ByVal hwnd As LongPtr, ByVal lpText As String, ByVal lpCaption As String, ByVal uType As Long)).

Wäre es möglich, Paolo und anderen, die möglicherweise noch solche alten Skripte haben, eine 32-Bit-Excel-Version über Citrix oder Azure zur Verfügung zu stellen?

So könnten sie ihre alten Skripte weiterhin nutzen und gleichzeitig die 64-Bit-Version für alle neuen Arbeiten verwenden.

Mein früheres Unternehmen hatte vor etwa 10 Jahren etwas Ähnliches gemacht. Sie boten sowohl 32-Bit- als auch 64-Bit-Excel über Citrix an, einige Monate vor dem 64-Bit-Upgrade, sodass die Benutzer ihre Apps und Dokumente auf beiden Versionen testen konnten.

Anstatt alle Mitarbeiter weiterhin 32-Bit für alte Apps verwenden zu lassen, könnten die meisten von 64-Bit profitieren. Gleichzeitig würden die „Exoten“ motiviert, ihre alten Apps zu migrieren, damit alles auf ihren normalen Desktops läuft. Sie hätten die Möglichkeit, ihre Apps selbst zu migrieren und zu testen, da sie sowohl die 32-Bit- als auch die 64-Bit-Version von Excel zur Verfügung haben.

Der zusätzliche Vorteil wäre, dass man einen vollständigen Überblick darüber hätte, wie viele und welche Nutzer noch 32-Bit-Office verwenden. Ist es nur Paolo oder gibt es noch fünf andere?