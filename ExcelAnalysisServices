Sub ListExcelPowerQueries()
    Dim xlApp As Object ' Excel.Application
    Dim xlWorkbook As Object ' Excel.Workbook
    Dim query As Object ' Excel.WorkbookQuery
    Dim conn As Object ' Excel.WorkbookConnection
    Dim db As DAO.Database
    Dim rs As DAO.Recordset
    Dim filePath As String
    Dim i As Integer
    
    ' Path to the Excel file
    filePath = "C:\Path\To\Your\Workbook.xlsx"
    
    ' Open Excel Application
    On Error Resume Next
    Set xlApp = CreateObject("Excel.Application")
    If Err.Number <> 0 Then
        MsgBox "Excel is not installed or could not be opened.", vbCritical
        Exit Sub
    End If
    On Error GoTo 0
    
    xlApp.Visible = False
    Set xlWorkbook = xlApp.Workbooks.Open(filePath)
    
    ' Open Access Table for data insertion
    Set db = CurrentDb()
    Set rs = db.OpenRecordset("PowerQueries", dbOpenDynaset)
    
    ' Loop through Workbook Queries
    i = 0
    For Each query In xlWorkbook.Queries
        rs.AddNew
        rs!QueryName = query.Name
        rs!QueryFormula = query.Formula
        rs.Update
        i = i + 1
    Next query
    
    ' Loop through Workbook Connections (if needed)
    For Each conn In xlWorkbook.Connections
        rs.AddNew
        rs!QueryName = conn.Name
        rs!ConnectionString = conn.ODBCConnection.Connection
        rs.Update
    Next conn
    
    ' Clean up
    rs.Close
    Set rs = Nothing
    Set db = Nothing
    xlWorkbook.Close SaveChanges:=False
    xlApp.Quit
    Set xlWorkbook = Nothing
    Set xlApp = Nothing
    
    MsgBox i & " queries listed in the Access table 'PowerQueries'.", vbInformation
End Sub



Function GetFileLastModifiedDate(filePath As String) As String
    Dim fileSystem As Object
    Set fileSystem = CreateObject("Scripting.FileSystemObject")
    
    On Error Resume Next
    If fileSystem.FileExists(filePath) Then
        GetFileLastModifiedDate = fileSystem.GetFile(filePath).DateLastModified
    Else
        GetFileLastModifiedDate = "File Not Found"
    End If
    On Error GoTo 0
    
    Set fileSystem = Nothing
End Function

Add this code to your workbook in the ThisWorkbook module.

     Public Sub Workbook_SAP_Initialize()

       MsgBox "Analysis just initialized " & ThisWorkbook.Name

     End Sub

lastRefreshDate = Application.Run("SAPGetProperty", "LastRefreshedTime", crosstabName)
 

Sub RefreshSAPCrosstabAndAddFilter()
    Dim crosstabName As String
    Dim dimensionName As String
    Dim newFilterValue As String

    ' Define the crosstab and filter details
    crosstabName = "SAPCrosstab1"       ' Name of the Analysis Services crosstab
    dimensionName = "YourDimensionName" ' Replace with the actual dimension to filter
    newFilterValue = "YourNewValue"     ' Replace with the new value to add to the filter

    ' Refresh the crosstab
    Call Application.Run("SAPExecuteCommand", "Refresh", crosstabName)

    ' Add a new filter value
    ' Check if the filter already exists and append the new value
    Dim currentFilter As String
    currentFilter = Application.Run("SAPGetFilter", crosstabName, dimensionName)

    If InStr(currentFilter, newFilterValue) = 0 Then
        Dim updatedFilter As String
        If currentFilter = "" Then
            updatedFilter = newFilterValue
        Else
            updatedFilter = currentFilter & ";" & newFilterValue
        End If


Dimension and measure
Sub RefreshSAPCrosstabWithMeasureFilter()
    Dim crosstabName As String
    Dim measureName As String
    Dim filterCondition As String

    ' Define the crosstab and filter condition
    crosstabName = "SAPCrosstab1"        ' The name of your Analysis Services crosstab
    measureName = "YourMeasureName"      ' Replace with the name of the measure
    filterCondition = "YourCondition"   ' Replace with the condition (e.g., ">100")

    ' Construct the filter string
    Dim measureFilter As String
    measureFilter = measureName & " " & filterCondition

    ' Apply the filter via the SAP API
    On Error Resume Next
    Call Application.Run("SAPSetFilter", crosstabName, measureName, measureFilter)
    On Error GoTo 0

    ' Refresh the crosstab
    Call Application.Run("SAPExecuteCommand", "Refresh", crosstabName)

    ' Notify the user
    MsgBox "Crosstab refreshed with measure filter applied!", vbInformation
End Sub
        ' Apply the updated filter
        Call Application.Run("SAPSetFilter", crosstabName, dimensionName, updatedFilter)
    End If

    ' Optional: Notify the user
    MsgBox "SAP Crosstab refreshed and filter updated!", vbInformation
End Sub

Sub LoginToSAP()
    Dim systemName As String
    Dim username As String
    Dim password As String

    ' Set your SAP system details
    systemName = "YourSystemName" ' Replace with your SAP system name
    username = "YourUsername"    ' Replace with your SAP username
    password = "YourPassword"    ' Replace with your SAP password (ensure it's securely stored)

    ' Use the SAP API to log in
    On Error Resume Next
    Call Application.Run("SAPLogon", systemName, username, password)
    On Error GoTo 0

    ' Check if login was successful
    Dim isLoggedIn As Boolean
    isLoggedIn = Application.Run("SAPGetProperty", "IsLoggedOn")

    If isLoggedIn Then
        MsgBox "Login successful!", vbInformation
    Else
        MsgBox "Login failed. Please check your credentials or system settings.", vbCritical
    End If
End Sub
